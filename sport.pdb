:-use_module(library(clpfd)).
:-use_module(library(lists)).

nReads(7).

startFile :-
    write('What is the filename?' ),
    read(Filename), nl,
    see(Filename),
    readValues(Data,1,Max),
    see(user),
    write('Cities list: '),
    read(Cities), nl,
    nth(3,Data,Choice),
    integer(Choice),
    whatToStart(Data,Cities).
whatToStart([NTeams,Turns,0],Cities) :-
    integer(NTeams),
    NTeams > 0,
    integer(Turns),
    Turns > 0,
    length(Cities,Len),
    Len == NTeams,
    start(NTeams,Turns,Vars,Cities). % Deixamos esta funcao assim?
whatToStart([NTeams,Turns,1,Equipa1,Equipa2,JornadaMin,JornadaMax],Cities) :-
    integer(NTeams),
    NTeams > 0,
    integer(Turns),
    Turns > 0,
    integer(Equipa1),
    Equipa1 > 1, Equipa1 =< NTeams,
    integer(Equipa2),
    Equipa1 \== Equipa2,
    Equipa2 > 1, Equipa2 =< NTeams,
    integer(JornadaMin),
    integer(JornadaMax),
    JornadaMin > 1, JornadaMin < JornadaMax,
    JornadaMax < NTeams,
    length(Cities,Len),
    Len == NTeams,
    start(NTeams,Turns,Vars,Cities). % Falta completar com os outros argumentos

readValues([H|T],N,Max) :-
    N > 0,
    read(INPUT),
    testReadValues(INPUT,[H|T],N),
    N1 is N + 1,
    readValues(T,N1,Max).
readValues(LIST,N,Max) :- LIST == [] ; N > Max.

testReadValues(0,[0|[]],3).
testReadValues(INPUT,[H|_],N) :- N \== 3, H == INPUT.

start(NTeams,Turns,Vars,Cities):-
  even(Turns),
  even(NTeams),
  NRounds is NTeams-1,
  Length is NTeams*NRounds,
  length(Dist,Length),
  domain(Dist,1,NTeams),
  length(HomeAway,Length),
  domain(HomeAway,0,1),
  constraintsForTeam(Dist,1,NRounds,NTeams,HomeAway),
  constraintsForRound(Dist,1,NRounds,NTeams,HomeAway),
  constraintsForCities(Dist,1,NRounds,NTeams,Cities,HomeAway),
  write('Nao sai do constraintsForCities'), nl,
  append(Dist,HomeAway,Vars),
  labeling([],Vars),
  print(Dist,NTeams,NRounds,1),
  nl,
  rebuildHomeAway(HomeAway,HA),
  printHomeAway(HA,NTeams,NRounds,1,Turns,Turns),
  write(Vars),
  nl.

constraintsForTeam(Dist,N,NRounds,NTeams,HomeAway):-
  N =< NTeams,
  getTeamList(Dist,N,NRounds,Team),
  all_different(Team),
  allElementsDif(Team,N),
%   getTeamList(HomeAway,N,NRounds,HomeAwayList),
%   constraintsForHomeAway(HomeAwayList),
  N1 is N+1,
  constraintsForTeam(Dist,N1,NRounds,NTeams,HomeAway).
constraintsForTeam(_,N,_,NTeams,_):-N>NTeams.

% constraintsForHomeAway([_]).
% constraintsForHomeAway([_,_]).
% constraintsForHomeAway([H,H1|T]):-
%   H #\= H1,
%   constraintsForHomeAway([H1|T]).

getTeamList(Dist,N,NRounds,Team):-
  End is N*NRounds,
  Begin is End-(NRounds-1),
  getSubList(Dist,Begin,End,Team).

allElementsDif([],_).
allElementsDif([H|T],N):-
  H #\= N,
  allElementsDif(T,N).

getElement([_|T],Index,Element):-
  Index > 1,
  N is Index-1,
  getElement(T,N,Element).
getElement([H|_],1,H).

getSubList(List,Begin,End,SubList):-
  SubLength is End-(Begin-1),
  BeforeLength is Begin-1,
  length(List,Length),
  AfterLength is Length-End,
  sublist(List,SubList,BeforeLength,SubLength,AfterLength).

getRoundList(Dist,N,NRounds,NTeams,L,RoundList):-
  N =< (NTeams*NRounds),
  getElement(Dist,N,Element),
  add(Element,L,L1),
  N1 is N+NRounds,
  getRoundList(Dist,N1,NRounds,NTeams,L1,RoundList).
getRoundList(_,N,NRounds,NTeams,L,L):-N>(NTeams*NRounds).

add(X,[],[X]).
add(X,[A|L],[A|L1]):-
  add(X,L,L1).

constraintsForRound(Dist,N,NRounds,NTeams,HomeAway):-
  N =< NRounds,
  getRoundList(Dist,N,NRounds,NTeams,[],RoundList),
  all_different(RoundList),
  getRoundList(HomeAway,N,NRounds,NTeams,[],HomeAwayList),
  constraintsForGame(RoundList,NTeams,1,HomeAwayList),
  N1 is N+1,
  constraintsForRound(Dist,N1,NRounds,NTeams,HomeAway).
constraintsForRound(_,N,NRounds,_,_):-N>NRounds.

constraintsForGame(RoundList,NTeams,N,HomeAwayList):-
  N =< NTeams,
  getElement(RoundList,N,Element),
  element(Element,RoundList,N1),
  N #= N1,
  getElement(HomeAwayList,N,Ele),
  element(Element,HomeAwayList,Ele1),
  Ele #\= Ele1,
  N2 is N+1,
  constraintsForGame(RoundList,NTeams,N2,HomeAwayList).
constraintsForGame(_,NTeams,N,_):-N>NTeams.

constraintsForCities(Dist,N,NRounds,NTeams,Cities,HomeAway) :-
    N =< NRounds, N > 0,
    write(N), nl, %Até aqui tá bom deve falhar em alguma das 3 seguintes
    getRoundList(Dist,N,NRounds,NTeams,[],RoundListDist),
    getRoundList(HomeAway,N,NRounds,NTeams,[],RoundListHomeAway),
    constraintsForCitiesAux(RoundListDist,RoundListHomeAway,Cities,1,NTeams),
    N1 is N + 1,
    constraintsForCities(Dist,N1,NRounds,NTeams,Cities,HomeAway).
constraintsForCities(_,N,NRounds,_,_) :- N > NRounds.

constraintsForCitiesAux(RoundListDist,RoundListHomeAway,Cities,N,NTeams) :-
    N =< NTeams, N > 0,
    getElement(Cities,N,TeamNCity),
    findAllIndex(INDEXES,Cities,TeamNCity,1,NTeams),
    indexedToList(INDEXES,RoundListHomeAway,SmallRoundListHomeAway,1),
    sum(SmallRoundListHomeAway,#=<,1),
    N1 is N + 1,
    constraintsForCitiesAux(RoundListDist,RoundListHomeAway,Cities,N1,NTeams).
constraintsForCitiesAux(_,_,_,N,NTeams) :- N > NTeams. % write(N),nl. Falha lá em cima pq aqui ta sempre a imprimir 5 na sem Aux.

indexedToList([N|RESTOINDEX],[H|T],NEWLIST,N) :-
    N > 0,
    add(H,NEWLIST,NEWLIST1),
    N1 is N + 1,
    indexedToList(RESTOINDEX,T,NEWLIST1,N1).
indexedToList(INDEXES,VALUES,_,_) :- INDEXES == [] ; VALUES == [].
indexedToList(INDEXES,[_|T],NEWLIST,N) :- N1 is N + 1, indexedToList(INDEXES,T,NEWLIST,N1).

findAllIndex(INDEXES,[H|T],KEYWORD,N,MAX) :-
    N =< MAX, N > 0,
    H == KEYWORD,
    add(N,INDEXES,NEWINDEXES),
    N1 is N + 1,
    findAllIndex(NEWINDEXES,T,KEYWORD,N1,MAX).
findAllIndex(INDEXES,L,_,N,MAX) :- N > MAX ; INDEXES == [] ; L == [].
findAllIndex(INDEXES,[_|T],KEYWORD,N,MAX) :- N1 is N + 1, findAllIndex(INDEXES,T,KEYWORD,N1,MAX).

differentFromList(OTHERTEAM,[H|T]) :-
    OTHERTEAM #\= H,
    differentFromList(OTHERTEAM,T).
differentFromList(_,[]).

even(N):- N mod 2 =:= 0.

odd(N):- N mod 2 =\= 0.

printHomeAway(_,_,_,_,0,_).
printHomeAway(HomeAway,NTeams,NRounds,NT,T,Turns):-
  T > 0,
  Rounds is (Turns-T)+1,
  write(Rounds),
  write(' round'),
  nl,
  print(HomeAway,NTeams,NRounds,NT),
  nl,
  T1 is T-1,
  invertHomeAway(HomeAway,HA),
  printHomeAway(HA,NTeams,NRounds,NT,T1,Turns).

rebuildHomeAway([],_).
rebuildHomeAway([0|T],['H'|T1]):-
  rebuildHomeAway(T,T1).
rebuildHomeAway([1|T],['A'|T1]):-
  rebuildHomeAway(T,T1).

invertHomeAway([],_).
invertHomeAway(['H'|T],['A'|T1]):-
  invertHomeAway(T,T1).
invertHomeAway(['A'|T],['H'|T1]):-
  invertHomeAway(T,T1).

print(Dist,NTeams,NRounds,NT):-
  write('  '),
  printHead(NRounds,NT),
  nl,
  printBody(Dist,NTeams,NRounds,NT).

printBody(Dist,NTeams,NRounds,NT):-
  NT =< NTeams,
  writeNT(NT),
  getTeamList(Dist,NT,NRounds,List),
  printLine(List),
  nl,
  NT1 is NT+1,
  printBody(Dist,NTeams,NRounds,NT1).
printBody(_,NTeams,_,NT):-NT>NTeams.

writeNT(NT):-
  NT < 10,
  write(' '),
  write(NT).
writeNT(NT):-
  NT >= 10,
  write(NT).

printLine([]).
printLine(['H'|T]):-
  write('   H'),
  printLine(T).
printLine(['A'|T]):-
  write('   A'),
  printLine(T).
printLine([H|T]):-
  H < 10,
  write('   '),
  write(H),
  printLine(T).
printLine([H|T]):-
  H>=10,
  write('  '),
  write(H),
  printLine(T).

printHead(NRounds,NT):-
  NT =< NRounds,
  NT < 10,
  write('   '),
  write(NT),
  NT1 is NT+1,
  printHead(NRounds,NT1).

printHead(NRounds,NT):-
  NT =< NRounds,
  NT >= 10,
  write('  '),
  write(NT),
  NT1 is NT+1,
  printHead(NRounds,NT1).
printHead(NRounds,NT):-NT>NRounds.
