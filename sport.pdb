:-use_module(library(clpfd)).
:-use_module(library(lists)).

start(NTeams,Turns,Vars):-
  even(NTeams),
  NRounds is NTeams-1,
  Length is NTeams*NRounds,
  length(Vars,Length),
  domain(Vars,1,NTeams),
  restrictionsByTeam(Vars,1,NRounds,NTeams),
  restrictionsByRound(Vars,1,NRounds,NTeams),
  labeling([],Vars),
  print(Vars,NTeams,NRounds,1),
  nl,
  write(Vars),
  nl.

restrictionsByTeam(Vars,N,NRounds,NTeams):-
  N =< NTeams,
  getTeamList(Vars,N,NRounds,Team),
  all_different(Team),
  allElementsDif(Team,N),
  N1 is N+1,
  restrictionsByTeam(Vars,N1,NRounds,NTeams).
restrictionsByTeam(_,_,_,_).

getTeamList(Vars,N,NRounds,Team):-
  End is N*NRounds,
  Begin is End-(NRounds-1),
  getSubList(Vars,Begin,End,Team).

allElementsDif([],_).
allElementsDif([H|T],N):-
  H #\= N,
  allElementsDif(T,N).

getElement([H|T],Index,Element):-
  Index > 1,
  N is Index-1,
  getElement(T,N,Element).
getElement([H|_],1,H).

getSubList(List,Begin,End,SubList):-
  SubLength is End-(Begin-1),
  BeforeLength is Begin-1,
  length(List,Length),
  AfterLength is Length-End,
  sublist(List,SubList,BeforeLength,SubLength,AfterLength).

getRoundList(Vars,N,NRounds,NTeams,L,RoundList):-
  N =< (NTeams*NRounds),
  getElement(Vars,N,Element),
  add(Element,L,L1),
  N1 is N+NRounds,
  getRoundList(Vars,N1,NRounds,NTeams,L1,RoundList).
getRoundList(_,N,NRounds,NTeams,L,L):-N>(NTeams*NRounds).

add(X,[],[X]).
add(X,[A|L],[A|L1]):-
  add(X,L,L1).

restrictionsByRound(Vars,N,NRounds,NTeams):-
  N =< NRounds,
  getRoundList(Vars,N,NRounds,NTeams,[],RoundList),
  all_different(RoundList),
  restrictionsByGame(RoundList,NTeams,1),
  N1 is N+1,
  restrictionsByRound(Vars,N1,NRounds,NTeams).
restrictionsByRound(_,_,_,_).

restrictionsByGame(RoundList,NTeams,N):-
  N =< NTeams,
  getElement(RoundList,N,Element),
  element(Element,RoundList,N1),
  N #= N1,
  N2 is N+1,
  restrictionsByGame(RoundList,NTeams,N2).
restrictionsByGame(_,_,_).

even(N):- N mod 2 =:= 0.

odd(N):- N mod 2 =\= 0.

print(Vars,NTeams,NRounds,NT):-
  write('  '),
  printHead(NRounds,NT),
  nl,
  printBody(Vars,NTeams,NRounds,NT).

printBody(Vars,NTeams,NRounds,NT):-
  NT =< NTeams,
  writeNT(NT),
  getTeamList(Vars,NT,NRounds,List),
  printLine(List),
  nl,
  NT1 is NT+1,
  printBody(Vars,NTeams,NRounds,NT1).
printBody(_,_,_,_).

writeNT(NT):-
  NT < 10,
  write(' '),
  write(NT).
writeNT(NT):-
  NT >= 10,
  write(NT).

printLine([]).
printLine([H|T]):-
  H < 10,
  write('   '),
  write(H),
  printLine(T).
printLine([H|T]):-
  H>=10,
  write('  '),
  write(H),
  printLine(T).

printHead(NRounds,NT):-
  NT =< NRounds,
  NT < 10,
  write('   '),
  write(NT),
  NT1 is NT+1,
  printHead(NRounds,NT1).

printHead(NRounds,NT):-
  NT =< NRounds,
  NT >= 10,
  write('  '),
  write(NT),
  NT1 is NT+1,
  printHead(NRounds,NT1).
printHead(_,_).
